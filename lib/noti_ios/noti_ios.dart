import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:http/http.dart' as http;
import 'package:timezone/timezone.dart' as tz;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:e_auction/services/winner_service.dart';
import 'package:e_auction/services/user_bid_history_service.dart';
import 'package:e_auction/views/config/config_prod.dart';
import 'dart:isolate';
import 'dart:async';
/// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ï‡∏≠‡∏ô 09:00) - ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏î‡πâ‡∏ß‡∏¢
Future<void> setupIOSNewAuctionNotification(FlutterLocalNotificationsPlugin plugin) async {
  final iOSPlugin = plugin.resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>();
  if (iOSPlugin != null) {
    await iOSPlugin.requestPermissions(alert: true, badge: true, sound: true);

    String newAuctionTitle = '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•';
    String newAuctionBody = '‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞';

    final now = DateTime.now();
    var scheduledTime = DateTime(now.year, now.month, now.day, 18, 00); // 09:00
    if (now.isAfter(scheduledTime)) {
      scheduledTime = scheduledTime.add(Duration(days: 1));
    }

    await plugin.zonedSchedule(
        2,
        newAuctionTitle,
        newAuctionBody,
        tz.TZDateTime.from(scheduledTime, tz.local),
        NotificationDetails(
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            sound: 'default',
            interruptionLevel: InterruptionLevel.active,
          ),
        ),
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
        matchDateTimeComponents: DateTimeComponents.time,
        payload: 'announce_winners', // ‡πÄ‡∏û‡∏¥‡πà‡∏° payload ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
      );
      
    // ‡∏™‡πà‡∏á trigger ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
    print('üîî SCHEDULED: Setting up notification for ${scheduledTime.toString()}');
    print('üîî SCHEDULED: Will automatically trigger winner announcement at scheduled time');
  }
}



/// ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö immediate (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤)
Future<void> sendImmediateAuctionNotification(
  FlutterLocalNotificationsPlugin plugin,
  String auctionTitle,
  String message,
  {String? payload}
) async {
  const AndroidNotificationDetails androidPlatformChannelSpecifics =
      AndroidNotificationDetails(
    'auction_channel',
    'Auction Notifications',
    channelDescription: 'Notifications for auction events',
    importance: Importance.max,
    priority: Priority.high,
    showWhen: true,
  );

  const DarwinNotificationDetails iOSPlatformChannelSpecifics =
      DarwinNotificationDetails(
    presentAlert: true,
    presentBadge: true,
    presentSound: true,
    sound: 'default',
    interruptionLevel: InterruptionLevel.active,
  );

  const NotificationDetails platformChannelSpecifics = NotificationDetails(
    android: androidPlatformChannelSpecifics,
    iOS: iOSPlatformChannelSpecifics,
  );

  await plugin.show(
    100, // ‡πÉ‡∏ä‡πâ ID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö scheduled notifications
    auctionTitle,
    message,
    platformChannelSpecifics,
    payload: payload,
  );
}

/// ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
Future<void> sendWinnerNotification(
  FlutterLocalNotificationsPlugin plugin,
  String auctionTitle,
  String finalPrice,
) async {
  const AndroidNotificationDetails androidPlatformChannelSpecifics =
      AndroidNotificationDetails(
    'winner_channel',
    'Winner Notifications',
    channelDescription: 'Notifications for auction winners',
    importance: Importance.max,
    priority: Priority.high,
    showWhen: true,
    color: Color(0xFF4CAF50), // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
  );

  const DarwinNotificationDetails iOSPlatformChannelSpecifics =
      DarwinNotificationDetails(
    presentAlert: true,
    presentBadge: true,
    presentSound: true,
    sound: 'default',
    interruptionLevel: InterruptionLevel.active,
  );

  const NotificationDetails platformChannelSpecifics = NotificationDetails(
    android: androidPlatformChannelSpecifics,
    iOS: iOSPlatformChannelSpecifics,
  );

  await plugin.show(
    101,
    'üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•',
    '‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• "$auctionTitle" ‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ $finalPrice',
    platformChannelSpecifics,
    payload: 'winner_auction',
  );
}

/// ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡πÅ‡∏ã‡∏á
Future<void> sendOutbidNotification(
  FlutterLocalNotificationsPlugin plugin,
  String auctionTitle,
  String currentBid,
) async {
  const AndroidNotificationDetails androidPlatformChannelSpecifics =
      AndroidNotificationDetails(
    'outbid_channel',
    'Outbid Notifications',
    channelDescription: 'Notifications when you are outbid',
    importance: Importance.high,
    priority: Priority.high,
    showWhen: true,
    color: Color(0xFFFF9800), // ‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡πÅ‡∏ã‡∏á
  );

  const DarwinNotificationDetails iOSPlatformChannelSpecifics =
      DarwinNotificationDetails(
    presentAlert: true,
    presentBadge: true,
    presentSound: true,
    sound: 'default',
    interruptionLevel: InterruptionLevel.active,
  );

  const NotificationDetails platformChannelSpecifics = NotificationDetails(
    android: androidPlatformChannelSpecifics,
    iOS: iOSPlatformChannelSpecifics,
  );

  await plugin.show(
    102,
    '‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡πÅ‡∏ã‡∏á‡πÅ‡∏•‡πâ‡∏ß!',
    '‡∏°‡∏µ‡∏Ñ‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• "$auctionTitle" ‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ $currentBid ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß',
    platformChannelSpecifics,
    payload: 'outbid_auction',
  );
}

/// ‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
Future<void> cancelAllNotifications(FlutterLocalNotificationsPlugin plugin) async {
  await plugin.cancelAll();
}

/// ‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏° ID
Future<void> cancelNotification(FlutterLocalNotificationsPlugin plugin, int id) async {
  await plugin.cancel(id);
}

/// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
Future<bool> checkNotificationPermission(FlutterLocalNotificationsPlugin plugin) async {
  final iOSPlugin = plugin.resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>();
  if (iOSPlugin != null) {
    final result = await iOSPlugin.requestPermissions(
      alert: true,
      badge: true,
      sound: true,
    );
    return result == true;
  }
  return false;
}

/// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
Future<void> announceWinnersAtScheduledTime(FlutterLocalNotificationsPlugin plugin) async {
  try {
    print('üîî SCHEDULED: Starting scheduled winner announcement...');
    
    // ‡∏™‡πà‡∏á API call ‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡πÜ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á body
    final url = Uri.parse('${Config.apiUrlAuction}/ERP-Cloudmate/modules/sales/controllers/list_quotation_type_auction_price_controller.php?id=8&action=announce_winner');
    
    print('üîî SCHEDULED: Sending API call to: $url');
    
    final response = await http.post(url);
    
    print('üîî SCHEDULED: API Response Status: ${response.statusCode}');
    print('üîî SCHEDULED: API Response Body: ${response.body}');
    
    if (response.statusCode == 200) {
      print('üéâ SCHEDULED: Winner announcement API call successful!');
    } else {
      print('‚ö†Ô∏è SCHEDULED: Winner announcement API call failed with status: ${response.statusCode}');
    }
    
    print('üîî SCHEDULED: Winner announcement completed');
  } catch (e) {
    print('‚ùå SCHEDULED: Error in scheduled winner announcement: $e');
  }
}

/// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: Background task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á API call
Future<void> triggerWinnerAnnouncementInBackground() async {
  try {
    print('üîÑ BACKGROUND: Starting background winner announcement...');
    
    // ‡∏™‡πà‡∏á API call ‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡πÜ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á body
    final url = Uri.parse('${Config.apiUrlAuction}/ERP-Cloudmate/modules/sales/controllers/list_quotation_type_auction_price_controller.php?&action=announce_all_winners');
    
    print('üîÑ BACKGROUND: Sending API call to: $url');
    
    final response = await http.post(
      url,
      headers: {'Content-Type': 'application/json'},
      body: '{}',
    );
    
    print('üîÑ BACKGROUND: API Response Status: ${response.statusCode}');
    print('üîÑ BACKGROUND: API Response Body: ${response.body}');
    
    if (response.statusCode == 200) {
      print('üéâ BACKGROUND: Winner announcement API call successful!');
    } else {
      print('‚ö†Ô∏è BACKGROUND: Winner announcement API call failed with status: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå BACKGROUND: Error in background winner announcement: $e');
  }
}

/// ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ bid ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà bid ‡πÄ‡∏≠‡∏á)
Future<void> sendBidSuccessNotification(
  FlutterLocalNotificationsPlugin plugin,
  String productTitle,
  String latestPrice,
  String bidderName,
) async {
  try {
    print('üîî BID_SUCCESS: Starting bid success notification...');
    print('üîî BID_SUCCESS: Product: $productTitle');
    print('üîî BID_SUCCESS: Latest Price: $latestPrice');
    print('üîî BID_SUCCESS: Bidder: $bidderName');
    
    const AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
      'bid_success_channel',
      'Bid Success Notifications',
      channelDescription: 'Notifications when someone successfully bids',
      importance: Importance.high,
      priority: Priority.high,
      showWhen: true,
      color: Color(0xFF2196F3), // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ bid ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    );

    const DarwinNotificationDetails iOSPlatformChannelSpecifics =
        DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      sound: 'default',
      interruptionLevel: InterruptionLevel.active,
    );

    const NotificationDetails platformChannelSpecifics = NotificationDetails(
      android: androidPlatformChannelSpecifics,
      iOS: iOSPlatformChannelSpecifics,
    );

    await plugin.show(
      103, // ‡πÉ‡∏ä‡πâ ID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö notifications ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
      'üí∞ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà!',
      '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "$productTitle" ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ $latestPrice',
      platformChannelSpecifics,
      payload: 'bid_success_auction',
    );
    
    print('üéâ BID_SUCCESS: Notification sent successfully!');
  } catch (e) {
    print('‚ùå BID_SUCCESS: Error sending notification: $e');
  }
}

/// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ background task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ 09:00
Future<void> setupBackgroundWinnerAnnouncement() async {
  try {
    print('üîÑ BACKGROUND: Setting up background winner announcement...');
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 09:00
    final now = DateTime.now();
    var nextScheduledTime = DateTime(now.year, now.month, now.day, 18, 00); // 09:00
    
    if (now.isAfter(nextScheduledTime)) {
      nextScheduledTime = nextScheduledTime.add(Duration(days: 1));
    }
    
    final delay = nextScheduledTime.difference(now);
    
    print('üîÑ BACKGROUND: Next scheduled time: ${nextScheduledTime.toString()}');
    print('üîÑ BACKGROUND: Delay: ${delay.inSeconds} seconds');
    
    // ‡∏ï‡∏±‡πâ‡∏á timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á trigger
    Timer(delay, () async {
      print('üîÑ BACKGROUND: Timer triggered at ${DateTime.now().toString()}');
      await triggerWinnerAnnouncementInBackground();
      
      // ‡∏ï‡∏±‡πâ‡∏á timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      Timer(Duration(days: 1), () {
        setupBackgroundWinnerAnnouncement();
      });
    });
    
  } catch (e) {
    print('‚ùå BACKGROUND: Error setting up background task: $e');
  }
}

Future<void> checkAndNotifyExpiredAuctions(FlutterLocalNotificationsPlugin plugin) async {
  final url = Uri.parse('${Config.apiUrlAuction}/ERP-Cloudmate/modules/sales/controllers/auction_expiry_controller.php?action=expired');
  print('[Workmanager] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤...');
  try {
    final response = await http.get(url);
    print('[Workmanager] API Response Status: ${response.statusCode}');
    print('[Workmanager] API Response Body: ${response.body}');
    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      if (data['status'] == 'success' && data['data'] != null && data['data']['auctions'] != null) {
        final auctions = data['data']['auctions'] as List;
        print('[Workmanager] ‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ${auctions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
        for (final auction in auctions) {
          print('[Workmanager] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö auction: ${auction['short_text']} (noti=${auction['noti']})');
          if (auction['noti'] == "0") {
            print('[Workmanager] -> ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${auction['short_text']}');
            await sendImmediateAuctionNotification(
              plugin,
              '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•: ${auction['short_text']}',
              auction['expired_text'] ?? '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß',
              payload: 'expired_auction_${auction['quotation_more_information_id']}',
            );
            // TODO: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó noti=1 ‡∏ù‡∏±‡πà‡∏á server ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ endpoint
          }
        }
      } else {
        print('[Workmanager] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• auction ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤');
      }
    } else {
      print('[Workmanager] API Error: ${response.statusCode}');
    }
  } catch (e) {
    print('[Workmanager] Error: $e');
  }
}





